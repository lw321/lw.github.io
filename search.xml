<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>voc甲醛释放分级</title>
      <link href="/2205181/"/>
      <url>/2205181/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>甲醛释放是家具行业不可避免的难题，主要来源是其使用的胶粘剂：脲醛树脂胶、酚醛树脂胶和三聚氰胺树脂胶。长期暴露于甲醛环境可降低机体的呼吸功能、神经系统的信息整合功能和影响机体的免疫应答，对心血管系统、内分泌系统、消化系统、生殖系统、肾也具有毒性作用。全身症状包括头痛、乏力、食欲缺乏、心悸、失眠、体重减轻及自主神经紊乱等。动物实验也证实上述相关系统的病理改变。（尚丽新，朴丰源主编. 环境有害因素的生殖和发育毒性[M]）研究动物发现，大鼠暴露于每立方米15μg甲醛的环境中11个月，可致鼻癌。美国国家癌症研究所2009年5月12日公布的一项最新研究成果显示，频繁接触甲醛的化工厂工人死于血癌、淋巴癌等癌症的几率比接触甲醛机会较少的工人高很多。2010年又发现甲醛能引哺乳动物细胞核的基因突变、染色体损伤。甲醛与其他多环芳烃有联合作用，如与苯并芘的联合作用会使毒性增强。</p><p>随着环保与安全意识的不断提高，国家对于甲醛释放分级标准也不断完善，从国标GB&#x2F;T 18580-2017规定了E1级和E2级到最新的GB&#x2F;T 39600-2021《人造板及其制品甲醛释放量分级》规定的E0级和ENF级，必将引领产业技术进步，推进家居建材行业绿色发展和产业转型升级提供重要方向。</p><h1 id="测量方法"><a href="#测量方法" class="headerlink" title="测量方法"></a>测量方法</h1><h2 id="1-穿孔萃取法"><a href="#1-穿孔萃取法" class="headerlink" title="1.穿孔萃取法"></a>1.穿孔萃取法</h2><p>对象：中密度纤维板、高密度纤维板、刨花板、定向刨花板等</p><p>原理：先用溶剂甲苯和试件共热通过液-固萃取使甲醛从板材溶解出来，再将获得的溶液通过穿孔器与水液-液萃取把甲醛转溶于水中，最后测定甲醛水溶液浓度</p><p>试件尺寸：长25mm；宽25mm；厚为板厚；重500g（其中100用于含水率测定）；试件一式两份做两次试验，误差不大于0.5mg&#x2F;100g，内部做一次即可</p><h2 id="2-干燥器法"><a href="#2-干燥器法" class="headerlink" title="2.干燥器法"></a>2.干燥器法</h2><p>对象：胶合板、装饰单板贴面胶合板、细木工板、饰面人造板等</p><p>原理：在一定温度下，把已知表面积的试件放入干燥器，试件释放的甲醛被一定体积的水吸收，测定24h内水中的甲醛含量</p><p>试件尺寸：长150mm；宽50mm；总表面积接近1800c㎡，以此确定试件数量</p><h2 id="3-气候箱法"><a href="#3-气候箱法" class="headerlink" title="3.气候箱法"></a>3.气候箱法</h2><p>对象：饰面人造板（浸渍纸层压木质地板、实木复合地板、竹地板、浸渍胶膜纸饰面人造板等）</p><p>原理：将1㎡表面积的样品放入温度、相对湿度、空气流速和空气置换率控制在一定值的气候箱内。甲醛从样品中释放出来，与箱内空气混合，定期抽取箱内空气，将抽出的空气通过盛有蒸馏水的吸收瓶，空气中的甲醛全部溶入水中：测定吸收液中的甲醛量及抽取的空气体积，计算出每立方米空气中的甲醛量，以毫克每立方米(g&#x2F;m)表示。抽气是周期性的，直到气候箱内的空气中甲醛质量浓度达到稳定状态为止。</p><p>试件尺寸：长500mm；宽500mm；表面积为1㎡</p><p>注：气候箱法检测时间长，日常检测常采用干燥器法，但仲裁时采用气候箱法</p><h1 id="等级划分"><a href="#等级划分" class="headerlink" title="等级划分"></a>等级划分</h1><h2 id="E2级"><a href="#E2级" class="headerlink" title="E2级"></a>E2级</h2><p>&#x3D;&#x3D;E2级不能用于室内装饰，必须饰面处理&#x3D;&#x3D;</p><p>中密度纤维板、高密度纤维板、刨花板、定向刨花板等采用穿孔萃取法，规定≤30mg&#x2F;100g</p><p>胶合板、装饰单板贴面胶合板、细木工板、饰面人造板等采用干燥器法，规定≤5.0mg&#x2F;L</p><h2 id="E1级"><a href="#E1级" class="headerlink" title="E1级"></a>E1级</h2><p>E1级可直接用于室内</p><p>中密度纤维板、高密度纤维板、刨花板、定向刨花板等采用穿孔萃取法，规定≤9mg&#x2F;100g</p><p>胶合板、装饰单板贴面胶合板、细木工板、饰面人造板等采用干燥器法，规定≤1.5mg&#x2F;L</p><p>饰面人造板（浸渍纸层压木质地板、实木复合地板、竹地板、浸渍胶膜纸饰面人造板等）采用干燥器法，规定≤1.5mg&#x2F;L；采用气候箱法，规定≤0.124mg&#x2F;m³</p><h2 id="E0级"><a href="#E0级" class="headerlink" title="E0级"></a>E0级</h2><p>依据GB&#x2F;T 39600-2021《人造板及其制品甲醛释放量分级》适用于纤维板、刨花板、胶合板、细木工板、重组装饰材、单板层积材、集成材、饰面人造板、木质地板、木质墙板、木质门等室内用各类人造板及其制品的甲醛释量分级。</p><p>采用气候箱法，规定≤0.050mg&#x2F;m³</p><h2 id="ENF级"><a href="#ENF级" class="headerlink" title="ENF级"></a>ENF级</h2><p>采用气候箱法，规定≤0.025mg&#x2F;m³</p><h1 id="其他标准"><a href="#其他标准" class="headerlink" title="其他标准"></a>其他标准</h1><table><thead><tr><th>等级</th><th>释放量</th></tr></thead><tbody><tr><td>未检出级</td><td>0.005mg&#x2F;m³</td></tr><tr><td>UL金级</td><td>0.0098mg&#x2F;m³</td></tr><tr><td>国家卫健委孕婴24h+级</td><td>0.01mg&#x2F;m³</td></tr><tr><td>中建材CTC儿童安全级</td><td>0.02mg&#x2F;m³</td></tr><tr><td>F4星级</td><td>0.035mg&#x2F;m³</td></tr><tr><td>NAF无醛豁免级</td><td>0.049mg&#x2F;m³</td></tr></tbody></table><p>注：</p><p>市面上所谓无醛级不代表不含甲醛，只是甲醛含量很低；</p><p>其他标准不能光看数值比较优劣，因评价体系不同检测方法不同其效果也不同；</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人造板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cvs数据可视化实战</title>
      <link href="/2204021/"/>
      <url>/2204021/</url>
      
        <content type="html"><![CDATA[<p>本篇是CVS数据可视化实战练习，以此纪念</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>1、使用csv模块、datetime模块、matplotlib.pyplot模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime  <span class="comment"># 转化日期的模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># import matplotlib.ticker as ticker   # 用于调整横坐标显示角度(可选)</span></span><br></pre></td></tr></table></figure><p>2、数据来源：<a href="https://ourworldindata.org/coronavirus">冠状病毒大流行（COVID-19） - 我们的数据世界 (ourworldindata.org)</a>＆<a href="https://www.kaggle.com/">Kaggle: Your Home for Data Science</a></p><h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h1><p>3、在python中对Windows中的一个文件进行内容的读取时，若报错：<strong>“ UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0x9a in position 14: illegal multibyte sequence ”</strong>主要是是在python中默认的编码方式是 “ gbk ”，而Windows中的文件默认的编码方式是 “ utf-8 ” ，所以导致python编译器无法成功读取或写入文件内容。故以只读方式打开时除了指定模式为”r”之外还有指定在python中以要打开的文件的编码相同的方式打开，也就是让python不以默认的 gbk方式打开，而是以我们指定的 utf-8 打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>), dpi=<span class="number">80</span>)   <span class="comment"># 设置图形大小</span></span><br><span class="line">filename = <span class="string">&#x27;ziliao/china-covid-data1.csv&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># win系统文件打开需注意编码</span></span><br><span class="line">    reader = csv.reader(f)   <span class="comment"># 创建一个与文件相关联的阅读器对象</span></span><br><span class="line">    header_row = <span class="built_in">next</span>(reader)   <span class="comment"># next返回文件下一行以查看文件头</span></span><br></pre></td></tr></table></figure><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><p>在循环中，对列表调用了<code>enumerate()</code>来获取每个元素的索引及其值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line"><span class="keyword">for</span> index, column_header <span class="keyword">in</span> <span class="built_in">enumerate</span>(header_row):</span><br><span class="line">    <span class="built_in">print</span>(index, column_header)</span><br></pre></td></tr></table></figure><h1 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h1><p>先创建空列表，选择需使用的数据，再遍历文件中余下的各行，由于已经读取了文件头行，这个循环将从第二行开始即需要的数据。</p><p>使用模块datetime中的方法s<code>trptime()</code>，将包含所需日期的字符串作为第一个实参。第二个实参告诉Python如何设置日期的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dates, new_cases, total_cases = [], [], []</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">    date = datetime.strptime(row[<span class="number">3</span>], <span class="string">&#x27;%Y/%m/%d&#x27;</span>)  <span class="comment"># 第一个实参为所需日期，第二个实参为日期格式</span></span><br><span class="line">    new_case = <span class="built_in">int</span>(<span class="built_in">float</span>(row[<span class="number">5</span>]))</span><br><span class="line">    total_case = <span class="built_in">int</span>(<span class="built_in">float</span>(row[<span class="number">4</span>]))</span><br><span class="line">    dates.append(date)</span><br><span class="line">    new_cases.append(new_case)</span><br><span class="line">    total_cases.append(total_case)</span><br><span class="line">    new_cases_per_million.append(new_cases_per_million1)</span><br></pre></td></tr></table></figure><h1 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">plt.style.use(<span class="string">&#x27;seaborn&#x27;</span>)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(dates, new_cases, c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">ax.plot(dates, total_cases, c=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">ax.plot(dates, new_cases_per_million, c=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置格式</span></span><br><span class="line"><span class="comment"># plt.xticks(rotation=90)   # 旋转横坐标</span></span><br><span class="line">fig.autofmt_xdate()   <span class="comment"># 倾斜横坐标</span></span><br><span class="line">ax.set_title(<span class="string">&quot;2020-至今 新冠确诊人数分析&quot;</span>, fontdict=&#123;<span class="string">&quot;family&quot;</span>: <span class="string">&quot;KaiTi&quot;</span>&#125;)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;人数&#x27;</span>, fontdict=&#123;<span class="string">&quot;family&quot;</span>: <span class="string">&quot;KaiTi&quot;</span>&#125;)</span><br><span class="line">ax.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">16</span>)</span><br><span class="line"><span class="comment">#plt.show()</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;新冠确诊人数分析&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h1><p><img src="https://s2.loli.net/2022/04/02/cv29hPXeANG5roI.png" alt="日薪增人数"></p><p><img src="https://s2.loli.net/2022/04/02/kGpwVuWR2UCbiqH.png" alt="总确诊人数"></p><p><img src="https://s2.loli.net/2022/04/02/6JUTMwtZvQ1o5x2.png" alt="GDP分析"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>希望疫情尽快恢复平稳啊，2020年的四月是疫情放缓的节点，今年也能早点结束吧，加油！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化</title>
      <link href="/2202232/"/>
      <url>/2202232/</url>
      
        <content type="html"><![CDATA[<h1 id="使用pyplot"><a href="#使用pyplot" class="headerlink" title="使用pyplot"></a>使用pyplot</h1><p>模块pyplot包含很多用于生成图表的函数，首先导入模块pyplot，并为其指定别名plt，以免反复输入pyplot。函数<code>subplots()</code>可在一张图片中绘制一个或多个图表，函数<code>plt.show()</code>打开Matplotlib查看器并显示绘制的图表。变量fig表示整张图片，变量ax表示图片中的各个图表。如果用到中文，导入模块后需补充一句代码调用中文字体<code>plt.rc(&quot;font&quot;, family=&#39;Simhei&#39;)</code>，要让程序自动将图表保存到文件中，可将调用<code>plt.show()</code>替换为调用<code>plt.savefig()</code>，第一个实参指定要以什么文件名保存图表，第二个实参指定将图表多余的空白区域裁剪掉。如果要保留图表周围多余的空白区域，只需省略这个实参即可。</p><h1 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h1><p>参数<code>linewidth</code>决定了plot()绘制的线条粗细，方法<code>set_title()</code>给图表指定标题。参数<code>fontsize</code>指定图表中各种文字的大小，方法<code>set_xlabel()和set_ylabel()</code>为每条轴设置标题，方法tick_params()设置刻度的样式，其中指定的实参将影响x轴和y轴上的刻度（axes&#x3D;’both’），并将刻度标记的字号设置为14（labelsize&#x3D;14），要使用图表样式，语法为：<code>plt.style.use(‘样式名’)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x_value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y_value = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">plt.style.use(<span class="string">&#x27;seaborn&#x27;</span>) <span class="comment">#使用样式</span></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.plot(x_value, y_value, linewidth=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 图标标题及轴标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;平方数&#x27;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;值&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;值的平方&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line"><span class="comment"># 刻度标记大小</span></span><br><span class="line">plt.tick_params(axis=<span class="string">&#x27;both&#x27;</span>, which=<span class="string">&#x27;major&#x27;</span>, labelsize=<span class="number">14</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h1><p>要绘制点，可使用方法<code>scatter()</code>。向它传递坐标，它将在指定位置绘制点，参数C为指定颜色，颜色映射用于突出数据的规律,将参数c设置成了一个值列表，并使用参数cmap告诉pyplot使用哪个颜色映射，可以生成一个渐变色，s为设置点大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rc(<span class="string">&quot;font&quot;</span>, family=<span class="string">&#x27;Simhei&#x27;</span>)</span><br><span class="line">x_values = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>)</span><br><span class="line">y_values = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> x_values]</span><br><span class="line"><span class="comment"># 散点图</span></span><br><span class="line">plt.scatter(x_values, y_values, c=y_values, cmap=plt.cm.Reds, s=<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 图标标题及轴标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;平方数&#x27;</span>, fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;值&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;值的平方&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line"><span class="comment"># 坐标轴取值范围</span></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">11000</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>待更新。。。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记||Python学习</title>
      <link href="/3221/"/>
      <url>/3221/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇主要为Python基础，在读教材的过程中节选自认为需要关注的信息，若日后确有所需，以便尽快查阅。</p><h1 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h1><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>变量名只能包含字母、数字和下划线。变量名能以字母或下划线打头，但<strong>不能以数字打头、不能包含空格</strong>。</p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>无论是哪种运算，只要有操作数是浮点数，Python默认得到的总是浮点数，即便结果原本为整数也是如此</p><p>在Python看来，1000与1_000没什么不同，1_000与10_00也没什么不同。这种表示法适用于整数和浮点数</p><h2 id="同时给多个变量赋值"><a href="#同时给多个变量赋值" class="headerlink" title="同时给多个变量赋值"></a>同时给多个变量赋值</h2><p>需要用逗号将变量名分开，对于要赋给变量的值，也需同样处理，Python将按顺序将每个值赋给对应的变量如<code>x, y, z = 0, 0, 0</code></p><h1 id="二、列表"><a href="#二、列表" class="headerlink" title="二、列表"></a>二、列表</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>从0而不是1开始，为访问最后一个列表元素提供了一种特殊语法。通过将索引指定为-1，可让Python返回最后一个列表元素。通过使用索引如<code>example[3]</code>调用列表元素</p><h2 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>使用方法<code>append.()</code>将元素附加到列表。给列表附加元素时，它将添加到列表末尾</p><p>方法<code>insert(</code>)可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。</p><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>使用<strong>del</strong>语句删除任意元素，如<code>del example[3]</code></p><p>方法<code>pop()</code>来删除列表中任意位置的元素，只需在圆括号中指定要删除元素的索引即可（当你使用pop()时，被弹出的元素就不再在列表中了。）</p><p>不知道要从列表中删除的值所处的位置。如果只知道要删除的元素的值，可使用方法<code>remove()</code></p><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><p>方法<code>sort()</code>永久性地修改列表元素的排列顺序，按与字母顺序相反的顺序排列列表元素，只需向方法传递参数<code>reverse=True</code>即可</p><p>函数sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序</p><p>方法<code>reverse()</code>反转列表元素的排列顺序，不是按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序</p><p>方法<code>len()</code>可快速获悉列表的长度</p><h2 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h2><p>方法<code>range()</code>让你能够轻松地生成一系列数，要创建数字列表，可使用函数<code>list()</code>将range()的结果直接转换为列表。如果将range()作为list()的参数，输出将是一个数字列表。</p><p>如：for value in range(1,5)、list(range(2,11,2))：函数range()从2开始数，然后不断加2，直到达到或超过终值（11）</p><h2 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>可指定要使用的第一个元素和最后一个元素的索引，如：<code>exmple[0:3]</code></p><h3 id="遍历切片"><a href="#遍历切片" class="headerlink" title="遍历切片"></a>遍历切片</h3><p>在for循环中使用切片</p><h3 id="复制列表"><a href="#复制列表" class="headerlink" title="复制列表"></a>复制列表</h3><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引（[:]）。这让Python创建一个始于第一个元素、终止于最后一个元素的切片，即整个列表的副本。</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>Python将不能修改的值称为不可变的，而不可变的列表被称为元组。，元组看起来很像列表，但使用<strong>圆括号</strong>而非中括号来标识</p><h1 id="三、判断"><a href="#三、判断" class="headerlink" title="三、判断"></a>三、判断</h1><p>一个等号是陈述，两个等号则是发问，在Python中检查是否相等时区分大小写</p><p>要判断两个值是否不等，可结合使用惊叹号和等号（!&#x3D;），其中的惊叹号表示不</p><p>要判断特定的值是否已包含在列表中，可使用关键字<code>in</code>，确定特定的值未包含在列表中很重要。在这种情况下，可使用关键字<code>not in</code></p><p>if-elif-else结构功能强大，但仅适合用于只有一个条件满足的情况：遇到通过了的测试后，Python就跳过余下的测试。</p><p>在if语句中将列表名用作条件表达式时，Python将在列表至少包含一个元素时返回True，并在<strong>列表为空时返回False</strong></p><h1 id="四、字典"><a href="#四、字典" class="headerlink" title="四、字典"></a>四、字典</h1><p>键值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号分隔，而键值对之间用逗号分隔</p><h2 id="修改键值对"><a href="#修改键值对" class="headerlink" title="修改键值对"></a>修改键值对</h2><p>形如example[‘name’] &#x3D; ‘lw’</p><p>使用del语句时，必须指定字典名和要删除的键，删除的键值对会永远消失</p><h2 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h2><p>方法<code>get()</code>的第一个参数用于指定键，是必不可少的；第二个参数为指定的键不存在时要返回的值，故如果指定的键有可能不存在，应考虑使用方法get()，而不要使用方括号表示法。如果没有指定第二个参数且指定的键不存在，Python将返回值None。</p><p>用for循环来遍历字典，可声明两个变量，用于存储键值对中的键和值。这两个变量可以使用任意名称，for语句的第二部分包含字典名和方法<code>items()</code>，它返回一个键值对列表。如果只需遍历字典的键，使用方法<code>keys()</code>可让代码更容易理解，但是也可以省略它。如果只需遍历字典包含的值，用方法<code>values()</code>来返回一个值列表，不包含任何键，为剔除重复项，可使用集合（set）。集合中的每个元素都必须是独一无二的，对包含重复元素的列表调用set()，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合。</p><p>遍历字典时将按插入的顺序返回其中的元素，要以特定顺序返回元素，一种办法是在for循环中<strong>对返回的键进行排序</strong>。为此，可使用函数<code>sorted()</code>来获得按特定顺序排列的键列表的副本</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>可使用一对花括号直接创建集合，并在其中用逗号分隔元素，当花括号内没有键值对时，定义的很可能是集合。不同于列表和字典，集合不会以特定的顺序存储元素。</p><h1 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h1><p>使用关键字<code>def</code>来告诉Python，你要定义一个函数。这是<strong>函数定义</strong>。</p><p><strong>文档字符串</strong>用<strong>三引号括起</strong>，Python使用它们来生成有关程序中函数的文档。</p><p>在函数的定义中，<strong>形参</strong>，即函数完成工作所需的信息。<strong>实参</strong>，即调用函数时传递给函数的信息。向函数传递实参的方式很多：可使用<strong>位置实参</strong>，这要求实参的顺序与形参的<strong>顺序相同</strong>；也可使用<strong>关键字实参</strong>，是传递给函数的名称值对。因为直接在实参中将名称和值关联起来，所以向函数传递实参时不会混淆，让你无须考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。给形参、实参指定默认值时，等号两边不要有空格。</p><p>函数返回的值称为返回值，可使用<code>return语句</code>将值返回到调用函数的代码行，函数可返回任何类型的值，包括列表和字典等较复杂的数据结构</p><p>传递任意数量的实参时，形参名例如<em>toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中，要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参*<em>放在最后</em></em></p><p>形参**user_info中的两个星号让Python创建一个名为user_info的空字典，并将收到的所有名称值对都放到这个字典中</p><p><strong>模块</strong>是扩展名为.py的文件，包含要导入到程序中的代码，<code>import语句</code>允许在当前运行的程序文件中使用模块中的代码。要调用被导入模块中的函数，可指定被导入模块的名称和函数名，并用<strong>句点分隔</strong>；还可以导入模块中的特定函数，这种导入方法的语法为<code>from module_name import function_name</code>通过用<strong>逗号分隔</strong>函数名，可根据需要从模块中导入任意数量的函数，使用星号（*）运算符可让Python导入模块中的所有函数</p><p>使用<code>as</code>给函数指定别名，如<code>from module_name import function_name as fn</code></p><h1 id="六、类"><a href="#六、类" class="headerlink" title="六、类"></a>六、类</h1><p>在Python中，首字母大写的名称指的是类。这个类定义中没有圆括号，因为要从空白创建这个类</p><p>方法<code>__init__()</code>是一个特殊方法，每当你根据类创建新实例时，Python都会自动运行它，开头和末尾各有两个下划线，这是一种约定，旨在避免Python默认方法与普通方法发生名称冲突，在这个方法的定义中，形参<code>self</code>必不可少，而且必须位于其他形参的前面，以self为前缀的变量可供类中的所有方法使用，可以通过类的任何实例来访问，像这样可通过实例访问的变量称为<strong>属性</strong>。</p><p>要访问实例的属性，可使用句点表示法，如下代码来访问my_dog的属性name的值：<code>my_dog.name</code>，要调用方法，可指定实例的名称和要调用的方法，并用句点分隔</p><p>定义子类时，必须在圆括号内指定父类的名称。方法__init__()接受创建的实例所需的信息。<code>super()</code>是一个特殊函数，让你能够调用父类的方法，父类也称为超类</p><p>从一个模块中导入多个类时，用<strong>逗号</strong>分隔了各个类，导入类时，也可为其指定别名</p><h1 id="七、文件和异常"><a href="#七、文件和异常" class="headerlink" title="七、文件和异常"></a>七、文件和异常</h1><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>函数open()接受一个参数：要打开的文件的名称;Python将该对象赋给file_object供以后使用;关键字with在不再需要访问文件后将其关闭.</p><p>因为read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除多出来的空行，可在函数调用print()中使用rstrip()</p><p>在相对路径行不通时，可使用绝对路径，就不用关心当前运行的程序存储在什么地方了。显示文件路径时，Windows系统使用反斜杠（\）而不是斜杠（&#x2F;），但在代码中依然可以使用斜杠。绝对路径通常比相对路径长，因此将其赋给一个变量，再将该变量传递给open()会有所帮助</p><p>将要读取的文件的名称赋给变量filename。这是使用文件时的一种常见做法，变量filename表示的并非实际文件——它只是一个让Python知道到哪里去查找文件的字符串</p><p>逐行读取时，每行的末尾都有一个看不见的换行符，而函数调用print()也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，另一个来自函数调用print()。要消除这些多余的空白行，可在函数调用print()中使用rstrip()</p><p>使用关键字with时，open()返回的文件对象只在with代码块内可用。如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表</p><p>方法readlines()从文件中读取每一行，并将其存储在一个列表中</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>调用<code>open()</code>时提供了两个实参，第一个实参也是要打开的文件的名称。第二个实参（’w’）告诉Python，要以写入模式打开这个文件。打开文件时，可指定读取模式（’r’）、写入模式（’w’）、附加模式（’a’）或读写模式（’r+’）。如果省略了模式实参，Python将以默认的只读模式打开文件。</p><p>以写入模式（’w’）打开文件时如果指定的文件已经存在，Python将在返回文件对象前清空该文件的内容，以附加模式打开文件时，Python不会在返回文件对象前清空文件的内容，而是将写入文件的行添加到文件末尾。如果指定的文件不存在，Python将为你创建一个空文件。</p><p>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数<code>str()</code>将其转换为字符串格式。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>将可能引发错误的代码放在<code>try-except</code>代码块中，可提高程序抵御错误的能力，依赖try代码块成功执行的代码都应放到else代码块中，except代码块告诉Python，出现异常时该如何办，pass语句，可用于让Python在代码块中什么都不要做</p><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h2><p>模块json能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据。使用json在Python程序之间分享数据。</p><p>函数<code>json.dump()</code>接受两个实参：要存储的数据，以及可用于存储数据的文件对象，使用<code>json.load()</code>可将列表读取到内存中</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大地板简介</title>
      <link href="/2232101/"/>
      <url>/2232101/</url>
      
        <content type="html"><![CDATA[<h1 id="1-实木地板特点"><a href="#1-实木地板特点" class="headerlink" title="1.实木地板特点"></a>1.实木地板特点</h1><h2 id="1-1优点"><a href="#1-1优点" class="headerlink" title="1.1优点"></a>1.1优点</h2><ul><li><p>外观质朴、自然   </p></li><li><p>可调温调湿</p></li><li><p>脚感舒适、弹性真实</p></li><li><p>具有绝缘性，对电和热传导性极小</p></li><li><p>易胶结，便于铺装（直接粘贴法、龙骨铺设法）</p></li></ul><h2 id="1-2缺点"><a href="#1-2缺点" class="headerlink" title="1.2缺点"></a>1.2缺点</h2><ul><li><p>吸湿易变性</p></li><li><p>纹理色差较大</p></li><li><p>不耐腐</p></li><li><p>有可燃性</p></li><li><p>铺装、维护要求较高</p></li></ul><h1 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h1><h2 id="2-1按企口分："><a href="#2-1按企口分：" class="headerlink" title="2.1按企口分："></a>2.1按企口分：</h2><ul><li>榫接（主流）</li><li>平接</li></ul><h2 id="2-2按结构分："><a href="#2-2按结构分：" class="headerlink" title="2.2按结构分："></a>2.2按结构分：</h2><ul><li>长条：榫接、平接</li><li>拼花：小规格地板条按一定形状拼图案</li><li>镶嵌：各色小木块按设计图案胶拼在一起形成胶拼地板</li><li>集成材：指接长料故而变形量小，尺寸稳定</li><li>竖木：以木材横截面为耐磨面，似马赛克，更耐磨，充分利用木材，图案更丰富</li></ul><h2 id="2-3按表面有无油漆分："><a href="#2-3按表面有无油漆分：" class="headerlink" title="2.3按表面有无油漆分："></a>2.3按表面有无油漆分：</h2><p>涂饰与未涂饰</p><h1 id="3-常见规格"><a href="#3-常见规格" class="headerlink" title="3.常见规格"></a>3.常见规格</h1><h2 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h2><ul><li>短板：760mm 以下</li><li>标准：900&#x2F;910mm</li><li>超长板：1200mm以上</li></ul><h2 id="宽度"><a href="#宽度" class="headerlink" title="宽度"></a>宽度</h2><ul><li>标板：90-100mm</li><li>宽板：100mm以上</li></ul><h2 id="厚度"><a href="#厚度" class="headerlink" title="厚度"></a>厚度</h2><ul><li>室内：18-20mm</li><li>地热：小于12mm</li><li>体育：大于20mm</li></ul><h1 id="4-材质选择"><a href="#4-材质选择" class="headerlink" title="4.材质选择"></a>4.材质选择</h1><p>木材建议性质均匀，软硬适中，弹性好，耐磨性好， 纹理色泽均匀美观，耐腐，涨缩性小，不易翘曲开裂，加工性能好，易胶结和涂饰等</p><p>国产常用桦木、水曲柳、柞木，密度在600-700左右</p><h1 id="5-加工工艺"><a href="#5-加工工艺" class="headerlink" title="5.加工工艺"></a>5.加工工艺</h1><h2 id="5-1榫接长条："><a href="#5-1榫接长条：" class="headerlink" title="5.1榫接长条："></a>5.1榫接长条：</h2><ol><li>原木加工：选材+原木造材+剖料+再剖</li><li>坯料气干、窑干</li><li>成型加工：分选-基准加工-企口加工-砂光</li><li>油漆、检验、包装</li></ol><ul><li>设计木段比成品长2-3cm作余量</li><li>先设计长规格标准板后设计短板</li><li>原木锯解直径小的选两面下锯法，留加工、干缩、企口余量，总约10mm</li><li>木段再剖改用小带锯或框锯（锯路小）</li><li>干燥过程需<strong>中间处理</strong>（对表面喷蒸处理）削弱含水率梯度缓和应力减少干燥缺陷，干燥结束需<strong>养生处理</strong>消除残余应力</li></ul><h2 id="5-2竖木地板："><a href="#5-2竖木地板：" class="headerlink" title="5.2竖木地板："></a>5.2竖木地板：</h2><p>采用整张化工序</p><p>原料-截断-剥皮-干燥-锯方-截断-防腐-涂胶-铺板-刨平-砂光-油漆</p><hr><h1 id="1实木复合地板特点"><a href="#1实木复合地板特点" class="headerlink" title="1实木复合地板特点"></a>1实木复合地板特点</h1><h2 id="1-1优点-1"><a href="#1-1优点-1" class="headerlink" title="1.1优点"></a>1.1优点</h2><ul><li>面层为高档实木拼板或单板，低档树种实木条&#x2F;单板为芯层</li><li>每层垂直交错排列，相互限制缩涨，尺寸稳定性好</li><li>高档面层美观性提升</li><li>节约资源，提高利用率</li><li>便于铺装，价格适中</li></ul><h2 id="1-2缺点-1"><a href="#1-2缺点-1" class="headerlink" title="1.2缺点"></a>1.2缺点</h2><ul><li>因层压而成故胶合质量差和维护不当易导致分层开裂</li><li>表层较薄重视保养</li><li>控制甲醛量</li></ul><h1 id="2-分类-1"><a href="#2-分类-1" class="headerlink" title="2.分类"></a>2.分类</h1><p>两次结构、三层结构，主要面层和芯层材料的不同</p><h1 id="3-工艺"><a href="#3-工艺" class="headerlink" title="3.工艺"></a>3.工艺</h1><h2 id="多层实木复合地板："><a href="#多层实木复合地板：" class="headerlink" title="多层实木复合地板："></a>多层实木复合地板：</h2><p>三部分：基材生产、面层生产、地板加工</p><h3 id="基材生产"><a href="#基材生产" class="headerlink" title="基材生产"></a>基材生产</h3><p>基材入库-多片锯剖片-干燥-砂光-单面涂胶</p><h3 id="面层生产"><a href="#面层生产" class="headerlink" title="面层生产"></a>面层生产</h3><p>表板坯料入库-分选-四面刨-框锯剖片-砂光-干燥</p><p>注：薄面板或材质较软的加工时选用旋切和刨切，材质硬的选锯切</p><h3 id="地板加工"><a href="#地板加工" class="headerlink" title="地板加工"></a>地板加工</h3><p>组坯-冷压-养生-双端铣齐头-开背槽-定厚砂光-加工企口-油漆</p><hr><h1 id="1-强化地板特点"><a href="#1-强化地板特点" class="headerlink" title="1.强化地板特点"></a>1.强化地板特点</h1><p>浸渍纸层压木质地板又称强化地板是以一层或多层专用装饰纸浸渍热固性氨基树脂铺装在高密度纤维板等人造板基材上，一般四层结构分为：表层（耐磨层）+装饰层+基材层+底层（平衡层）。平衡层：即防潮层，是纸经浸渍热固性聚酯树脂阻隔地面水分潮气，同时重量和上基材相当起到平衡作用，使装饰层具有一定厚度和强度。</p><h2 id="1-1优点-2"><a href="#1-1优点-2" class="headerlink" title="1.1优点"></a>1.1优点</h2><ul><li>由于有耐磨层其表面耐磨性会优于一般油漆地板</li><li>装饰层图案极其丰富</li><li>尺寸稳定性好</li><li>表面耐污染、耐腐蚀、耐灼烧</li><li>保养方便</li></ul><h2 id="1-2缺点-2"><a href="#1-2缺点-2" class="headerlink" title="1.2缺点"></a>1.2缺点</h2><ul><li>采用悬浮铺设，无弹性脚感稍差（相比实木地板）</li><li>不可修复（一旦损坏，只能更换）</li><li>甲醛释放</li></ul><h1 id="2-加工工艺"><a href="#2-加工工艺" class="headerlink" title="2.加工工艺"></a>2.加工工艺</h1><p>主要两部分：贴面装饰板制造（大板生产）、机械加工工序（相比实木地板，刀具因为耐磨层的三氧化二铝需增加刀轴换金刚石刀具）</p><h2 id="2-1大板生产"><a href="#2-1大板生产" class="headerlink" title="2.1大板生产"></a>2.1大板生产</h2><p>耐磨纸+装饰层+基材+平衡纸————组坯-热压-卸板-陈放</p><p>也可以采用两次热压工艺，区别是一次热压地板无倒角或很浅，二次热压则倒角大、深，省去倒角工序。</p><h2 id="2-2机械加工"><a href="#2-2机械加工" class="headerlink" title="2.2机械加工"></a>2.2机械加工</h2><p>装饰大板-养生-剖分-二次养生-榫槽加工-检验分等</p><p>注：倒角V型槽既有立体感也减少边缘泛白，但易堆积灰尘出现黑缝；U型槽是通过模压成型技术，倒角处也有耐磨层保护更耐磨，底部更宽便于清洁无黑缝，抗冲击，也可防止毛边现象但相对价格高。现在更流行<strong>R型槽</strong>（高光大圆弧）具有U型槽全部优点而且解决铺装高低差难以控制的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法学习</title>
      <link href="/2/"/>
      <url>/2/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown是什么"><a href="#Markdown是什么" class="headerlink" title="Markdown是什么"></a>Markdown是什么</h1><p>Markdown 是一种轻量级的标记语言，可用于在纯文本文档中添加格式化元素。Markdown 由 John Gruber 于 2004 年创建，如今已成为世界上最受欢迎的标记语言之一。</p><p>特点：</p><ul><li>专注于文字内容；</li><li>纯文本，易读易写，可以方便地纳入版本控制；</li><li>语法简单，没有什么学习成本，能轻松在码字的同时做出美观大方的排版。</li></ul><h1 id="Markdown-有什么用"><a href="#Markdown-有什么用" class="headerlink" title="Markdown 有什么用"></a>Markdown 有什么用</h1><p>Markdown 是做笔记、为网站创建内容以及生成可打印文档的快速、简便的方法。</p><p>学习 Markdown 语法并不需要很长时间，一旦你知道如何使用它，你就可以在几乎所有地方使用 Markdown 进行书写了。大多数人使用 Markdown 来为网站创建内容，但是 Markdown 也可以很好地格式化从电子邮件到购物清单的所有内容。</p><h1 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h1><p>1、标题语法：前面加<code>#</code>号表示标题，几个#就代表几级标题；</p><p>2、段落语法：用空白行将段落分割或<code>&lt;p&gt;&lt;/P&gt;</code>；</p><p>3、换行语法：末尾用多个空格换行或者<code>&lt;br&gt;</code></p><p>4、强调语法：<strong>加粗用前后两个</strong><code>*</code>,<em>斜体用单个</em><code>*</code></p><p>5、引用语法：创建块引用使用 <code>&gt;</code>，嵌套块用两个<code>&gt;&gt;</code></p><p>6、列表用法：有序列表使用数字开头后面加英文的点即1. ，数字顺序不要求，但应以1作起始，如：  </p><ol><li>列表一</li><li>列表二</li><li>列表三</li></ol><p>无序列表开头使用<code>-</code>或者<code>*</code>或者<code>+</code>，缩进列表项可进行嵌套，如：   </p><ul><li>列表一</li><li>列表二   <ul><li>列表三</li></ul></li></ul><p>7、代码语法：表示代码前后用反引号如：<code>code</code> </p><p><code>如果表示为代码的词包含一个或多个反引号语句中包含多个代码前后使用双反引号即可，如：这是一个`test`，效果如本句</code>    <br>代码块前后用三个反引号如： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      &lt;html&gt;</span><br><span class="line">      &lt;head&gt;</span><br><span class="line">          &lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p> 8、分割符语法：单独一行上使用三个 <code>*</code> 或 <code>-</code> 或 <code>_</code> ，如：    </p><hr><p> 9、链接语法：中括号内为链接名称，小括号内为链接地址，可添加双引号内写title，如：    <br>分站： <a href="http://blog.lw123.cf/" title="六味の小破站">我的小破站</a></p><p>10、图片语法：前面添加<code>！</code>后接链接语法即可</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好呀！</title>
      <link href="/1/"/>
      <url>/1/</url>
      
        <content type="html"><![CDATA[<p>欢迎你，本站为兴趣随心所建，尚有瑕疵，还请谅解</p><p>祝一切安好！</p>    <div id="aplayer-RhdNsJDy" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1980964492" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"    ></div><p><img src="https://s2.loli.net/2022/03/22/dW7vzLDjYkryAGE.png" alt="六味先生"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
